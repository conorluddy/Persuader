[
  {
    "title": "React Hooks API Reference",
    "content": "# React Hooks API Reference\n\nReact Hooks are functions that let you use state and other React features without writing a class component. Hooks are a new addition in React 16.8.\n\n## useState Hook\n\nThe useState Hook lets you add state to functional components.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### Parameters\n- `initialState`: The value you want the state to be initially. It can be a value of any type, but there is special behavior for functions.\n\n### Returns\n`useState` returns an array with exactly two values:\n1. The current state value, initially set to the initial state you provided\n2. A set function that lets you update the state to a different value and trigger a re-render\n\n## useEffect Hook\n\nThe useEffect Hook lets you perform side effects in functional components. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount combined in React classes.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### Cleanup\nOften, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID.\n\n```jsx\nuseEffect(() => {\n  const timer = setInterval(() => {\n    setCount(prevCount => prevCount + 1);\n  }, 1000);\n\n  return () => clearInterval(timer);\n}, []);\n```\n\n## Rules of Hooks\n\n1. **Only call Hooks at the top level.** Don't call Hooks inside loops, conditions, or nested functions.\n2. **Only call Hooks from React functions.** Don't call Hooks from regular JavaScript functions.\n\n## Custom Hooks\n\nA custom Hook is a JavaScript function whose name starts with \"use\" and that may call other Hooks.\n\n```jsx\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(initialValue);\n\n  return { count, increment, decrement, reset };\n}\n```",
    "url": "https://react.dev/reference/react",
    "metadata": {
      "author": "React Team",
      "publishDate": "2023-03-16",
      "tags": ["react", "hooks", "javascript", "frontend"]
    }
  },
  {
    "title": "REST API Design Best Practices",
    "content": "# REST API Design Best Practices\n\nRepresentational State Transfer (REST) is an architectural style for distributed hypermedia systems. This guide covers essential principles for designing clean, maintainable REST APIs.\n\n## Core Principles\n\n### 1. Use Nouns, Not Verbs\nAPI endpoints should represent resources (nouns), not actions (verbs).\n\n**Good:**\n- GET /users\n- POST /users\n- GET /users/123\n- PUT /users/123\n- DELETE /users/123\n\n**Bad:**\n- GET /getUsers\n- POST /createUser\n- GET /getUserById/123\n\n### 2. Use HTTP Methods Correctly\n\n- **GET**: Retrieve data, should be idempotent\n- **POST**: Create new resources\n- **PUT**: Update/replace entire resource\n- **PATCH**: Partial update of resource\n- **DELETE**: Remove resource\n\n### 3. Use Proper HTTP Status Codes\n\n- **200 OK**: Successful GET, PUT, PATCH\n- **201 Created**: Successful POST\n- **204 No Content**: Successful DELETE\n- **400 Bad Request**: Client error\n- **401 Unauthorized**: Authentication required\n- **403 Forbidden**: Access denied\n- **404 Not Found**: Resource doesn't exist\n- **500 Internal Server Error**: Server error\n\n## Resource Naming\n\n### Collection vs Resource\n- Collection: `/users` (plural noun)\n- Resource: `/users/123` (collection + identifier)\n\n### Nested Resources\nFor resources that exist within other resources:\n- `/users/123/posts` (posts belonging to user 123)\n- `/users/123/posts/456` (specific post by user 123)\n\n### Filtering and Pagination\nUse query parameters for filtering, sorting, and pagination:\n- `/users?status=active&sort=created_at&page=2&limit=20`\n\n## Request/Response Format\n\n### JSON Structure\nUse consistent JSON structure for responses:\n\n```json\n{\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  \"meta\": {\n    \"timestamp\": \"2023-03-16T10:30:00Z\",\n    \"version\": \"1.0\"\n  }\n}\n```\n\n### Error Responses\nProvide clear error messages:\n\n```json\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"The request body is invalid\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Email format is invalid\"\n      }\n    ]\n  }\n}\n```\n\n## Authentication and Security\n\n### API Keys\nFor simple authentication:\n```\nAuthorization: Bearer your-api-key-here\n```\n\n### JWT Tokens\nFor stateless authentication:\n```\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n### Rate Limiting\nImplement rate limiting to prevent abuse:\n```\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1609459200\n```\n\n## Versioning\n\nChoose a versioning strategy:\n\n1. **URL Path**: `/v1/users`, `/v2/users`\n2. **Query Parameter**: `/users?version=1`\n3. **Header**: `Accept: application/vnd.api+json;version=1`\n\n## Documentation\n\nAlways provide comprehensive API documentation including:\n- Endpoint descriptions\n- Request/response examples\n- Parameter specifications\n- Error code explanations\n- Authentication requirements\n\nTools like Swagger/OpenAPI can help generate interactive documentation.\n\n## Testing\n\nImplement thorough testing:\n- Unit tests for business logic\n- Integration tests for endpoints\n- Contract tests for API consumers\n- Load tests for performance\n\nRemember: Good API design is about creating intuitive, consistent interfaces that developers love to use.",
    "url": "https://restfulapi.net/",
    "metadata": {
      "author": "API Design Team",
      "publishDate": "2023-01-15",
      "tags": ["rest", "api", "backend", "http", "web-services"]
    }
  },
  {
    "title": "Getting Started with Docker",
    "content": "# Getting Started with Docker\n\nDocker is a platform for developing, shipping, and running applications using containerization technology. This guide will help you understand Docker basics and get your first container running.\n\n## What is Docker?\n\nDocker allows you to package applications and their dependencies into lightweight, portable containers that can run anywhere Docker is installed.\n\n### Key Concepts\n\n- **Container**: A running instance of an image\n- **Image**: A template for creating containers\n- **Dockerfile**: A text file with instructions to build an image\n- **Registry**: A storage service for Docker images (like Docker Hub)\n\n## Installation\n\n### Windows/Mac\n1. Download Docker Desktop from docker.com\n2. Run the installer\n3. Start Docker Desktop\n\n### Linux (Ubuntu)\n```bash\nsudo apt update\nsudo apt install docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\n### Verify Installation\n```bash\ndocker --version\ndocker run hello-world\n```\n\n## Basic Commands\n\n### Working with Images\n```bash\n# List local images\ndocker images\n\n# Pull an image from registry\ndocker pull nginx\n\n# Remove an image\ndocker rmi nginx\n```\n\n### Working with Containers\n```bash\n# Run a container\ndocker run nginx\n\n# Run container in background\ndocker run -d nginx\n\n# Run with port mapping\ndocker run -d -p 8080:80 nginx\n\n# List running containers\ndocker ps\n\n# List all containers\ndocker ps -a\n\n# Stop a container\ndocker stop container_id\n\n# Remove a container\ndocker rm container_id\n```\n\n## Creating Your First Dockerfile\n\nCreate a simple Node.js application:\n\n```dockerfile\n# Use official Node.js image\nFROM node:16-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install\n\n# Copy application code\nCOPY . .\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD [\"npm\", \"start\"]\n```\n\n### Build and Run\n```bash\n# Build image\ndocker build -t my-app .\n\n# Run container\ndocker run -d -p 3000:3000 my-app\n```\n\n## Docker Compose\n\nFor multi-container applications, use Docker Compose:\n\n```yaml\nversion: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n  \n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n```\n\n### Compose Commands\n```bash\n# Start services\ndocker-compose up\n\n# Start in background\ndocker-compose up -d\n\n# Stop services\ndocker-compose down\n\n# View logs\ndocker-compose logs\n```\n\n## Best Practices\n\n1. **Use specific image tags** instead of 'latest'\n2. **Minimize layer count** by combining RUN commands\n3. **Use .dockerignore** to exclude unnecessary files\n4. **Don't run as root** inside containers\n5. **Keep images small** by using alpine variants\n6. **Use multi-stage builds** for production images\n\nDocker simplifies application deployment and ensures consistency across different environments. Start with simple containers and gradually explore advanced features like networking, volumes, and orchestration.",
    "url": "https://docs.docker.com/get-started/",
    "metadata": {
      "author": "Docker Inc",
      "publishDate": "2023-02-20",
      "tags": ["docker", "containers", "devops", "deployment"]
    }
  }
]
